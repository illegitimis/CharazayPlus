using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AndreiPopescu.CharazayPlus.Utils
{
  /// <summary>
  /// processed data after reading data from db
  /// and building <see cref="TransferMarket112"/>,
  /// and running tests (TransferMarket112Test)
  /// </summary>
  public static class Interpolation112
  {
    #region data
    /// <summary>
    /// age, pos, method, A, B, R2
    /// </summary>
    static readonly object[,] Data = new object[63, 6] 
    {
 
 {(byte)15   ,'C',    'O',     0.001449407117d ,8.338524707077d ,0.89}
,{(byte)15   ,'F',    'L',     85.01 ,-73.46 ,0.49 }
,{(byte)15   ,'G',    'L',     44.93 ,-39.91 ,0.40 }
,{(byte)16   ,'C',    'L',     54.80 ,-44.63 ,0.49 }
,{(byte)16   ,'F',    'O',     0.000028167995 ,11.742503260742 ,0.86 }
,{(byte)16   ,'G',    'L',     36.76 ,-30.89 ,0.26 }
,{(byte)17   ,'C',    'O',     0.000113433694 ,10.002291042565 ,0.97 }
,{(byte)17   ,'F',    'O',     0.000101781361 ,9.911180600309 ,0.97 }
,{(byte)17   ,'G',    'O',     0.000007988728 ,11.818428093575 ,0.99 }
,{(byte)18   ,'C',    'O',     0.000011245822 ,11.711862567274 ,0.92 }
,{(byte)18   ,'F',    'L',     21.08 ,-18.26 ,0.40 }
,{(byte)18   ,'G',    'L',     25.42 ,-21.91 ,0.34 }
,{(byte)19   ,'C',    'L',     60.66 ,-49.97 ,0.51 }
,{(byte)19   ,'F',    'L',     50.98 ,-43.28 ,0.42 }
,{(byte)19   ,'G',    'L',     39.49 ,-34.07 ,0.32 }
,{(byte)20   ,'C',    'O',     0.000264232698 ,9.593324156953 ,0.82 }
,{(byte)20   ,'F',    'L',     41.18 ,-31.49 ,0.49 }
,{(byte)20   ,'G',    'O',     0.014005370664 ,6.406180259722 ,0.71 }
,{(byte)21   ,'C',    'L',     95.21 ,-79.30 ,0.53 }
,{(byte)21   ,'F',    'L',     78.27 ,-66.68 ,0.44 }
,{(byte)21   ,'G',    'L',     81.03 ,-62.59 ,0.64 }
,{(byte)22   ,'C',    'L',     81.07 ,-64.09 ,0.54 }
,{(byte)22   ,'F',    'L',     44.33 ,-33.33 ,0.41 }
,{(byte)22   ,'G',    'O',     0.000118293965 ,10.730549799264 ,0.61 }
,{(byte)23   ,'C',    'L',     97.12 ,-76.36 ,0.48 }
,{(byte)23   ,'F',    'L',     49.90 ,-39.70 ,0.32 }
,{(byte)23   ,'G',    'O',     0.000027672370 ,11.944952945330 ,0.88 }
,{(byte)24   ,'C',    'L',     124.08 ,-103.05 ,0.47 }
,{(byte)24   ,'F',    'L',     103.09 ,-85.51 ,0.64 }
,{(byte)24   ,'G',    'E',     0.000012061272 ,12.480978006308 ,0.97 }
,{(byte)25   ,'C',    'O',     0.000750522697 ,9.246023476860 ,0.63 }
,{(byte)25   ,'F',    'O',     0.000121278813 ,10.456618845026 ,0.90 }
,{(byte)25   ,'G',    'L',     22.53 ,-14.78 ,0.31 }
,{(byte)26   ,'C',    'O',     0.000157789070 ,10.469496936114 ,0.83 }
,{(byte)26   ,'F',    'O',     0.011959699362 ,6.825599250076 ,0.85 }
,{(byte)26   ,'G',    'O',     0.000491785159 ,9.341761325928 ,0.63 }
,{(byte)27   ,'C',    'O',     0.000480730058 ,9.475131610907 ,0.81 }
,{(byte)27   ,'F',    'L',     87.27 ,-77.99 ,0.53 }
,{(byte)27   ,'G',    'E',     0.000001014925 ,14.794964515896 ,0.52 }
,{(byte)28   ,'C',    'O',     0.000112505695 ,10.786356778580 ,0.87 }
,{(byte)28   ,'F',    'O',     0.000222224986 ,10.045553254466 ,0.86 }
,{(byte)28   ,'G',    'O',     0.001270533526 ,8.557159673571 ,0.85 }
,{(byte)29   ,'C',    'O',     0.000198115235 ,10.266995252105 ,0.93 }
,{(byte)29   ,'F',    'O',     0.000020424053 ,12.192852801740 ,0.75 }
,{(byte)29   ,'G',    'O',     0.000626011758 ,9.099261263500 ,0.82 }
,{(byte)30   ,'C',    'O',     0.000715253396 ,9.008021102313 ,0.85 }
,{(byte)30   ,'F',    'L',     122.87 ,-120.56 ,0.81 }
,{(byte)30   ,'G',    'O',     0.000717802724 ,9.001735112144 ,0.83 }
,{(byte)31   ,'C',    'O',     0.000022489099 ,11.952244193347 ,0.85 }
,{(byte)31   ,'F',    'O',     0.000037865102 ,11.516517345574 ,0.84 }
,{(byte)31   ,'G',    'L',     63.37 ,-56.13 ,0.62 }
,{(byte)32   ,'C',    'O',     0.000010906915 ,12.511660725301 ,0.88 }
,{(byte)32   ,'F',    'O',     0.000005757452 ,13.147260617858 ,0.75 }
,{(byte)32   ,'G',    'O',     0.000000373161 ,15.707144573868 ,0.61 }
,{(byte)33   ,'C',    'O',     0.000000783280 ,14.624843854576 ,0.90 }
,{(byte)33   ,'F',    'O',     0.000000000162 ,22.685288707255 ,0.56 }
,{(byte)33   ,'G',    'O',     0.000000088117 ,17.028343495649 ,0.59 }
,{(byte)34   ,'C',    'L',     16.19 ,-14.65 ,0.55 }
,{(byte)34   ,'F',    'L',     10.32 ,-8.91 ,0.33 }
,{(byte)34   ,'G',    'L',     16.05 ,-14.05 ,0.22 }
,{(byte)35   ,'C',    'L',     34.35 ,-33.21 ,0.41 }
,{(byte)35   ,'F',    'L',     2.35 ,-2.14 ,0.21 }
,{(byte)35   ,'G',    'O',     0.000000000011 ,25.242241327231 ,0.90  }

} ;   
  #endregion

    /// <summary>
    /// gets the interpolated transfer market value
    /// </summary>
    /// <param name="age">player age</param>
    /// <param name="pos">position</param>
    /// <param name="x">player age/value factor</param>
    /// <returns>interpolated transfer market value</returns>
    public static double GetTMValue (byte age, char pos, double x)
    {
      for (int i=0; i < 63; i++)
      {
        var a = (byte)Data[i,0]; //age
        var p = (char)Data[i, 1]; //pos
        if (a == age && p == pos)
        {
          var m = (double)Data[i,3]; //A
          var n = (double)Data[i, 4]; //B
          switch ((char)Data[i, 2])
          { //computation method
            case 'O': 
            case 'E': 
            default:
              return m * Math.Exp(n * x);
            case 'L':
              return m * x + n;
          }
         
        }
      }
      return double.NaN;
    }
  }
}
